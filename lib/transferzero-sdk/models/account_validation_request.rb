=begin
#TransferZero API

#Reference documentation for the TransferZero API V1

OpenAPI spec version: 1.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.0.0-beta3

=end

require 'date'

module TransferZero
class AccountValidationRequest
  # Account Number to query
  attr_accessor :bank_account

  # Bank Code to query - same codes are used as for creating the transactions
  attr_accessor :bank_code

  # IBAN to query - BBAN format for XOF bank accounts
  attr_accessor :iban

  # Phone number to query in E.164 format
  attr_accessor :phone_number

  attr_accessor :mobile_provider

  # Country of account in 2-character alpha ISO 3166-2 country format
  attr_accessor :country

  # The currency the bank account is in
  attr_accessor :currency

  # The method of the payment. Currently bank and mobile are supported
  attr_accessor :method

  class EnumAttributeValidator
    attr_reader :datatype
    attr_reader :allowable_values

    def initialize(datatype, allowable_values)
      @allowable_values = allowable_values.map do |value|
        case datatype.to_s
        when /Integer/i
          value.to_i
        when /Float/i
          value.to_f
        else
          value
        end
      end
    end

    def valid?(value)
      !value || allowable_values.include?(value)
    end
  end

  # Attribute mapping from ruby-style variable name to JSON key.
  def self.attribute_map
    {
      :'bank_account' => :'bank_account',
      :'bank_code' => :'bank_code',
      :'iban' => :'iban',
      :'phone_number' => :'phone_number',
      :'mobile_provider' => :'mobile_provider',
      :'country' => :'country',
      :'currency' => :'currency',
      :'method' => :'method'
    }
  end

  # Attribute type mapping.
  def self.openapi_types
    {
      :'bank_account' => :'String',
      :'bank_code' => :'String',
      :'iban' => :'String',
      :'phone_number' => :'String',
      :'mobile_provider' => :'PayoutMethodMobileProviderEnum',
      :'country' => :'String',
      :'currency' => :'String',
      :'method' => :'String'
    }
  end

  # Initializes the object
  # @param [Hash] attributes Model attributes in the form of hash
  def initialize(attributes = {})
    if (!attributes.is_a?(Hash))
      fail ArgumentError, "The input argument (attributes) must be a hash in `TransferZero::AccountValidationRequest` initialize method"
    end

    # check to see if the attribute exists and convert string to symbol for hash key
    attributes = attributes.each_with_object({}) { |(k, v), h|
      if (!self.class.attribute_map.key?(k.to_sym))
        fail ArgumentError, "`#{k}` is not a valid attribute in `TransferZero::AccountValidationRequest`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
      end
      h[k.to_sym] = v
    }

    if attributes.key?(:'bank_account')
      self.bank_account = attributes[:'bank_account']
    end

    if attributes.key?(:'bank_code')
      self.bank_code = attributes[:'bank_code']
    end

    if attributes.key?(:'iban')
      self.iban = attributes[:'iban']
    end

    if attributes.key?(:'phone_number')
      self.phone_number = attributes[:'phone_number']
    end

    if attributes.key?(:'mobile_provider')
      self.mobile_provider = attributes[:'mobile_provider']
    end

    if attributes.key?(:'country')
      self.country = attributes[:'country']
    end

    if attributes.key?(:'currency')
      self.currency = attributes[:'currency']
    end

    if attributes.key?(:'method')
      self.method = attributes[:'method']
    end
  end

  # Show invalid properties with the reasons. Usually used together with valid?
  # @return Array for valid properties with the reasons
  def list_invalid_properties
    invalid_properties = Array.new
    if @country.nil?
      invalid_properties.push('invalid value for "country", country cannot be nil.')
    end

    if @currency.nil?
      invalid_properties.push('invalid value for "currency", currency cannot be nil.')
    end

    if @method.nil?
      invalid_properties.push('invalid value for "method", method cannot be nil.')
    end

    invalid_properties
  end

  # Check to see if the all the properties in the model are valid
  # @return true if the model is valid
  def valid?
    return false if @country.nil?
    country_validator = EnumAttributeValidator.new('String', ["BF", "BJ", "CG", "CI", "CM", "GA", "GH", "KE", "NG", "SN", "TD", "TG", "UG"])
    return false unless country_validator.valid?(@country)
    return false if @currency.nil?
    currency_validator = EnumAttributeValidator.new('String', ["NGN", "GHS", "KES", "XOF", "UGX", "XAF"])
    return false unless currency_validator.valid?(@currency)
    return false if @method.nil?
    method_validator = EnumAttributeValidator.new('String', ["bank", "mobile"])
    return false unless method_validator.valid?(@method)
    true
  end

  # Custom attribute writer method checking allowed values (enum).
  # @param [Object] country Object to be assigned
  def country=(country)
    validator = EnumAttributeValidator.new('String', ["BF", "BJ", "CG", "CI", "CM", "GA", "GH", "KE", "NG", "SN", "TD", "TG", "UG"])
    unless validator.valid?(country) || country.empty?
      fail ArgumentError, "invalid value for \"country\", must be one of #{validator.allowable_values}."
    end
    @country = country
  end

  # Custom attribute writer method checking allowed values (enum).
  # @param [Object] currency Object to be assigned
  def currency=(currency)
    validator = EnumAttributeValidator.new('String', ["NGN", "GHS", "KES", "XOF", "UGX", "XAF"])
    unless validator.valid?(currency) || currency.empty?
      fail ArgumentError, "invalid value for \"currency\", must be one of #{validator.allowable_values}."
    end
    @currency = currency
  end

  # Custom attribute writer method checking allowed values (enum).
  # @param [Object] method Object to be assigned
  def method=(method)
    validator = EnumAttributeValidator.new('String', ["bank", "mobile"])
    unless validator.valid?(method) || method.empty?
      fail ArgumentError, "invalid value for \"method\", must be one of #{validator.allowable_values}."
    end
    @method = method
  end

  # Checks equality by comparing each attribute.
  # @param [Object] Object to be compared
  def ==(o)
    return true if self.equal?(o)
    self.class == o.class &&
        bank_account == o.bank_account &&
        bank_code == o.bank_code &&
        iban == o.iban &&
        phone_number == o.phone_number &&
        mobile_provider == o.mobile_provider &&
        country == o.country &&
        currency == o.currency &&
        method == o.method
  end

  # @see the `==` method
  # @param [Object] Object to be compared
  def eql?(o)
    self == o
  end

  # Calculates hash code according to all attributes.
  # @return [Integer] Hash code
  def hash
    [bank_account, bank_code, iban, phone_number, mobile_provider, country, currency, method].hash
  end

require 'active_support/core_ext/hash'
require 'active_support/hash_with_indifferent_access.rb'
# Builds the object from hash
# @param [Hash] attributes Model attributes in the form of hash
# @return [Object] Returns the model itself
def build_from_hash(attributes)
  return nil unless attributes.is_a?(Hash)
  self.class.openapi_types.each_pair do |key, type|
    if type =~ /\AArray<(.*)>/i
      # check to ensure the input is an array given that the the attribute
      # is documented as an array but the input is not
      if attributes[self.class.attribute_map[key]].is_a?(Array)
        self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
      end
    elsif !attributes[self.class.attribute_map[key]].nil?
      self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
    end # or else data not found in attributes(hash), not an issue as the data can be optional
  end

  self
end

# Deserializes the data based on type
# @param string type Data type
# @param string value Value to be deserialized
# @return [Object] Deserialized data
def _deserialize(type, value)
  case type.to_sym
  when :DateTime
    DateTime.parse(value)
  when :Date
    Date.parse(value)
  when :String
    value.to_s
  when :Integer
    value.to_i
  when :Float
    value.to_f
  when :Boolean
    if value.to_s =~ /\A(true|t|yes|y|1)\z/i
      true
    else
      false
    end
  when :Object
    # generic object (usually a Hash), return directly
    value
  when /\AArray<(?<inner_type>.+)>\z/
    inner_type = Regexp.last_match[:inner_type]
    value.map { |v| _deserialize(inner_type, v) }
  when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
    k_type = Regexp.last_match[:k_type]
    v_type = Regexp.last_match[:v_type]
    {}.tap do |hash|
      value.each do |k, v|
        hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
      end
    end
  else # model
    temp_model = TransferZero.const_get(type).new
    temp_model.build_from_hash(value)
  end
end

# Returns the string representation of the object
# @return [String] String presentation of the object
def to_s
  to_hash.to_s
end

# to_body is an alias to to_hash (backward compatibility)
# @return [Hash] Returns the object in the form of hash
def to_body
  to_hash
end

# Returns the object in the form of hash
# @return [Hash] Returns the object in the form of hash
def to_hash
  hash = {}
  self.class.attribute_map.each_pair do |attr, param|
    value = self.send(attr)
    next if value.nil?
    hash[param] = _to_hash(value)
  end
  ::ActiveSupport::HashWithIndifferentAccess.new(hash)
end

def [](key)
  to_hash[key]
end

def dig(*args)
  to_hash.dig(*args)
end

# Outputs non-array value in the form of hash
# For object, use to_hash. Otherwise, just return the value
# @param [Object] value Any valid value
# @return [Hash] Returns the value in the form of hash
def _to_hash(value)
  if value.is_a?(Array)
    value.compact.map { |v| _to_hash(v) }
  elsif value.is_a?(Hash)
    {}.tap do |hash|
      value.each { |k, v| hash[k] = _to_hash(v) }
    end
  elsif value.respond_to? :to_hash
    value.to_hash
  else
    value
  end
end

end

end
