=begin
#TransferZero API

#Reference documentation for the TransferZero API V1

The version of the OpenAPI document: 1.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.1.1

=end

require 'date'

module TransferZero
# ```JSON   \"details\": {     \"first_name\": \"First\",     \"last_name\": \"Last\",     \"street\": \"Main Street\",     \"bank_code\": \"68\",     \"bank_account\": \"12345678\",     \"bank_name\": \"Equity Bank Ltd\",     \"branch_code\": \"404\",     \"swift_code\" \"ABCLKENA\",     \"transfer_reason\": \"personal_account\", // New transfer reason field     \"identity_card_type\": \"ID\",     \"identity_card_id\": \"AB12345678\"   } ```  The valid bank_code values are:  - Habib Bank Limited: 08 - Trans-National Bank Limited: 26 - Housing Finance Co. Kenya: 61 - UBA Kenya Bank Ltd: 76 - Kenya Commercial Bank: 01000 - Standard Chartered Bank: 02000 - Barclays Bank of Kenya: 03000 - Bank of India: 05000 - Bank of Boroda: 06000 - NCBA Bank: 07000 - Prime Bank: 10000 - Co-operative Bank of Kenya: 11000 - National Bank of Kenya: 12000 - M-Oriental Commercial Bank Limited: 14000 - Citibank: 16000 - Habib Bank A.G. Zurich: 17000 - Middle East Bank: 18000 - Bank of Africa Kenya: 19000 - Consolidated Bank of Kenya: 23000 - Credit Bank Ltd: 25000 - Chase Bank: 30000 - Stanbic Bank Kenya: 31000 - African Banking Corporation: 35000 - Giro Bank Limited: 42000 - ECO Bank Kenya: 43000 - Spire Bank Limited: 49000 - Paramount Universal Bank Limited: 50000 - Jamii Bora Bank: 51000 - Guaranty Trust Bank Kenya: 53000 - Victoria Bank Limited: 54000 - Guardian Bank: 55000 - Investments and Mortgages Bank Limited: 57000 - Development Bank of Kenya: 59000 - Fidelity Commercial Bank: 46000 - Diamond Trust Bank: 63000 - Sidian Bank: 66000 - Equity Bank Limited: 68000 - Family Bank: 70000 - Gulf African Bank: 72000 - First Community Bank: 74000 - KWFT Bank: 78000  See [KES Bank](https://docs.transferzero.com/docs/payout-details/#kesbank) documentation for the transfer_reason list
class PayoutMethodDetailsKESBank
  attr_accessor :first_name

  attr_accessor :last_name

  attr_accessor :bank_code

  attr_accessor :street

  attr_accessor :bank_account

  attr_accessor :bank_name

  attr_accessor :branch_code

  attr_accessor :swift_code

  attr_accessor :transfer_reason_code

  attr_accessor :transfer_reason

  attr_accessor :identity_card_type

  attr_accessor :identity_card_id

  # Attribute mapping from ruby-style variable name to JSON key.
  def self.attribute_map
    {
      :'first_name' => :'first_name',
      :'last_name' => :'last_name',
      :'bank_code' => :'bank_code',
      :'street' => :'street',
      :'bank_account' => :'bank_account',
      :'bank_name' => :'bank_name',
      :'branch_code' => :'branch_code',
      :'swift_code' => :'swift_code',
      :'transfer_reason_code' => :'transfer_reason_code',
      :'transfer_reason' => :'transfer_reason',
      :'identity_card_type' => :'identity_card_type',
      :'identity_card_id' => :'identity_card_id'
    }
  end

  # Attribute type mapping.
  def self.openapi_types
    {
      :'first_name' => :'String',
      :'last_name' => :'String',
      :'bank_code' => :'String',
      :'street' => :'String',
      :'bank_account' => :'String',
      :'bank_name' => :'String',
      :'branch_code' => :'String',
      :'swift_code' => :'String',
      :'transfer_reason_code' => :'String',
      :'transfer_reason' => :'PayoutMethodTransferReasonEnum',
      :'identity_card_type' => :'PayoutMethodIdentityCardTypeEnum',
      :'identity_card_id' => :'String'
    }
  end

  # Initializes the object
  # @param [Hash] attributes Model attributes in the form of hash
  def initialize(attributes = {})
    if (!attributes.is_a?(Hash))
      fail ArgumentError, "The input argument (attributes) must be a hash in `TransferZero::PayoutMethodDetailsKESBank` initialize method"
    end

    # check to see if the attribute exists and convert string to symbol for hash key
    attributes = attributes.each_with_object({}) { |(k, v), h|
      if (!self.class.attribute_map.key?(k.to_sym))
        fail ArgumentError, "`#{k}` is not a valid attribute in `TransferZero::PayoutMethodDetailsKESBank`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
      end
      h[k.to_sym] = v
    }

    if attributes.key?(:'first_name')
      self.first_name = attributes[:'first_name']
    end

    if attributes.key?(:'last_name')
      self.last_name = attributes[:'last_name']
    end

    if attributes.key?(:'bank_code')
      self.bank_code = attributes[:'bank_code']
    end

    if attributes.key?(:'street')
      self.street = attributes[:'street']
    end

    if attributes.key?(:'bank_account')
      self.bank_account = attributes[:'bank_account']
    end

    if attributes.key?(:'bank_name')
      self.bank_name = attributes[:'bank_name']
    end

    if attributes.key?(:'branch_code')
      self.branch_code = attributes[:'branch_code']
    end

    if attributes.key?(:'swift_code')
      self.swift_code = attributes[:'swift_code']
    end

    if attributes.key?(:'transfer_reason_code')
      self.transfer_reason_code = attributes[:'transfer_reason_code']
    end

    if attributes.key?(:'transfer_reason')
      self.transfer_reason = attributes[:'transfer_reason']
    end

    if attributes.key?(:'identity_card_type')
      self.identity_card_type = attributes[:'identity_card_type']
    end

    if attributes.key?(:'identity_card_id')
      self.identity_card_id = attributes[:'identity_card_id']
    end
  end

  # Show invalid properties with the reasons. Usually used together with valid?
  # @return Array for valid properties with the reasons
  def list_invalid_properties
    invalid_properties = Array.new
    if @first_name.nil?
      invalid_properties.push('invalid value for "first_name", first_name cannot be nil.')
    end

    if @last_name.nil?
      invalid_properties.push('invalid value for "last_name", last_name cannot be nil.')
    end

    if @bank_code.nil?
      invalid_properties.push('invalid value for "bank_code", bank_code cannot be nil.')
    end

    if @street.nil?
      invalid_properties.push('invalid value for "street", street cannot be nil.')
    end

    if @bank_account.nil?
      invalid_properties.push('invalid value for "bank_account", bank_account cannot be nil.')
    end

    if @bank_name.nil?
      invalid_properties.push('invalid value for "bank_name", bank_name cannot be nil.')
    end

    if @swift_code.nil?
      invalid_properties.push('invalid value for "swift_code", swift_code cannot be nil.')
    end

    if @identity_card_type.nil?
      invalid_properties.push('invalid value for "identity_card_type", identity_card_type cannot be nil.')
    end

    if @identity_card_id.nil?
      invalid_properties.push('invalid value for "identity_card_id", identity_card_id cannot be nil.')
    end

    invalid_properties
  end

  # Check to see if the all the properties in the model are valid
  # @return true if the model is valid
  def valid?
    return false if @first_name.nil?
    return false if @last_name.nil?
    return false if @bank_code.nil?
    return false if @street.nil?
    return false if @bank_account.nil?
    return false if @bank_name.nil?
    return false if @swift_code.nil?
    return false if @identity_card_type.nil?
    return false if @identity_card_id.nil?
    true
  end

  # Checks equality by comparing each attribute.
  # @param [Object] Object to be compared
  def ==(o)
    return true if self.equal?(o)
    self.class == o.class &&
        first_name == o.first_name &&
        last_name == o.last_name &&
        bank_code == o.bank_code &&
        street == o.street &&
        bank_account == o.bank_account &&
        bank_name == o.bank_name &&
        branch_code == o.branch_code &&
        swift_code == o.swift_code &&
        transfer_reason_code == o.transfer_reason_code &&
        transfer_reason == o.transfer_reason &&
        identity_card_type == o.identity_card_type &&
        identity_card_id == o.identity_card_id
  end

  # @see the `==` method
  # @param [Object] Object to be compared
  def eql?(o)
    self == o
  end

  # Calculates hash code according to all attributes.
  # @return [Integer] Hash code
  def hash
    [first_name, last_name, bank_code, street, bank_account, bank_name, branch_code, swift_code, transfer_reason_code, transfer_reason, identity_card_type, identity_card_id].hash
  end

require 'active_support/core_ext/hash'
require 'active_support/hash_with_indifferent_access.rb'
# Builds the object from hash
# @param [Hash] attributes Model attributes in the form of hash
# @return [Object] Returns the model itself
def build_from_hash(attributes)
  return nil unless attributes.is_a?(Hash)
  self.class.openapi_types.each_pair do |key, type|
    if type =~ /\AArray<(.*)>/i
      # check to ensure the input is an array given that the the attribute
      # is documented as an array but the input is not
      if attributes[self.class.attribute_map[key]].is_a?(Array)
        self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
      end
    elsif !attributes[self.class.attribute_map[key]].nil?
      self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
    end # or else data not found in attributes(hash), not an issue as the data can be optional
  end

  self
end

# Deserializes the data based on type
# @param string type Data type
# @param string value Value to be deserialized
# @return [Object] Deserialized data
def _deserialize(type, value)
  case type.to_sym
  when :DateTime
    DateTime.parse(value)
  when :Date
    Date.parse(value)
  when :String
    value.to_s
  when :Integer
    value.to_i
  when :Float
    value.to_f
  when :Boolean
    if value.to_s =~ /\A(true|t|yes|y|1)\z/i
      true
    else
      false
    end
  when :Object
    # generic object (usually a Hash), return directly
    value
  when /\AArray<(?<inner_type>.+)>\z/
    inner_type = Regexp.last_match[:inner_type]
    value.map { |v| _deserialize(inner_type, v) }
  when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
    k_type = Regexp.last_match[:k_type]
    v_type = Regexp.last_match[:v_type]
    {}.tap do |hash|
      value.each do |k, v|
        hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
      end
    end
  else # model
    temp_model = TransferZero.const_get(type).new
    temp_model.build_from_hash(value)
  end
end

# Returns the string representation of the object
# @return [String] String presentation of the object
def to_s
  to_hash.to_s
end

# to_body is an alias to to_hash (backward compatibility)
# @return [Hash] Returns the object in the form of hash
def to_body
  to_hash
end

# Returns the object in the form of hash
# @return [Hash] Returns the object in the form of hash
def to_hash
  hash = {}
  self.class.attribute_map.each_pair do |attr, param|
    value = self.send(attr)
    next if value.nil?
    hash[param] = _to_hash(value)
  end
  ::ActiveSupport::HashWithIndifferentAccess.new(hash)
end

def [](key)
  to_hash[key]
end

def dig(*args)
  to_hash.dig(*args)
end

# Outputs non-array value in the form of hash
# For object, use to_hash. Otherwise, just return the value
# @param [Object] value Any valid value
# @return [Hash] Returns the value in the form of hash
def _to_hash(value)
  if value.is_a?(Array)
    value.compact.map { |v| _to_hash(v) }
  elsif value.is_a?(Hash)
    {}.tap do |hash|
      value.each { |k, v| hash[k] = _to_hash(v) }
    end
  elsif value.respond_to? :to_hash
    value.to_hash
  else
    value
  end
end

end

end
