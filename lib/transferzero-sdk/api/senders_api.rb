=begin
#BitPesa Private API

#API specification used for internal BitPesa endpoints

OpenAPI spec version: 1.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.0.0-beta3

=end

require 'uri'

module TransferZero
  class SendersApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end


    # Change sender onboarding state to 'profile_completed'
    # Transition sender to the 'profile_completed' onboarding state. This will only work if the sender has all the required documents uploaded and profile information present. 
    # @param sender_id ID of the sender to get.  Example: &#x60;/v1/senders/bf9ff782-e182-45ac-abea-5bce83ad6670/confirm_verification&#x60;
    # @param [Hash] opts the optional parameters
    # @return [SenderResponse]
    def confirm_sender_verification(sender_id, opts = {})
      data, _status_code, _headers = confirm_sender_verification_with_http_info(sender_id, opts)
      data
    end

    # Change sender onboarding state to &#39;profile_completed&#39;
    # Transition sender to the &#39;profile_completed&#39; onboarding state. This will only work if the sender has all the required documents uploaded and profile information present. 
    # @param sender_id ID of the sender to get.  Example: &#x60;/v1/senders/bf9ff782-e182-45ac-abea-5bce83ad6670/confirm_verification&#x60;
    # @param [Hash] opts the optional parameters
    # @return [Array<(SenderResponse, Fixnum, Hash)>] SenderResponse data, response status code and response headers
    def confirm_sender_verification_with_http_info(sender_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SendersApi.confirm_sender_verification ...'
      end
      # verify the required parameter 'sender_id' is set
      if @api_client.config.client_side_validation && sender_id.nil?
        fail ArgumentError, "Missing the required parameter 'sender_id' when calling SendersApi.confirm_sender_verification"
      end
      # resource path
      local_var_path = '/senders/{Sender ID}/confirm_verification'.sub('{' + 'Sender ID' + '}', sender_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['AuthorizationKey', 'AuthorizationNonce', 'AuthorizationSecret', 'AuthorizationSignature']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SenderResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SendersApi#confirm_sender_verification\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # Deleting a sender
    # Deletes a single sender by the Sender ID
    # @param sender_id ID of the sender to delete.  Example: &#x60;/v1/senders/bf9ff782-e182-45ac-abea-5bce83ad6670&#x60;
    # @param [Hash] opts the optional parameters
    # @return [SenderResponse]
    def delete_sender(sender_id, opts = {})
      data, _status_code, _headers = delete_sender_with_http_info(sender_id, opts)
      data
    end

    # Deleting a sender
    # Deletes a single sender by the Sender ID
    # @param sender_id ID of the sender to delete.  Example: &#x60;/v1/senders/bf9ff782-e182-45ac-abea-5bce83ad6670&#x60;
    # @param [Hash] opts the optional parameters
    # @return [Array<(SenderResponse, Fixnum, Hash)>] SenderResponse data, response status code and response headers
    def delete_sender_with_http_info(sender_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SendersApi.delete_sender ...'
      end
      # verify the required parameter 'sender_id' is set
      if @api_client.config.client_side_validation && sender_id.nil?
        fail ArgumentError, "Missing the required parameter 'sender_id' when calling SendersApi.delete_sender"
      end
      # resource path
      local_var_path = '/senders/{Sender ID}'.sub('{' + 'Sender ID' + '}', sender_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['AuthorizationKey', 'AuthorizationNonce', 'AuthorizationSecret', 'AuthorizationSignature']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SenderResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SendersApi#delete_sender\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # Fetching a sender
    # Returns a single sender by the Sender ID
    # @param sender_id ID of the sender to get.  Example: &#x60;/v1/senders/bf9ff782-e182-45ac-abea-5bce83ad6670&#x60;
    # @param [Hash] opts the optional parameters
    # @return [SenderResponse]
    def get_sender(sender_id, opts = {})
      data, _status_code, _headers = get_sender_with_http_info(sender_id, opts)
      data
    end

    # Fetching a sender
    # Returns a single sender by the Sender ID
    # @param sender_id ID of the sender to get.  Example: &#x60;/v1/senders/bf9ff782-e182-45ac-abea-5bce83ad6670&#x60;
    # @param [Hash] opts the optional parameters
    # @return [Array<(SenderResponse, Fixnum, Hash)>] SenderResponse data, response status code and response headers
    def get_sender_with_http_info(sender_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SendersApi.get_sender ...'
      end
      # verify the required parameter 'sender_id' is set
      if @api_client.config.client_side_validation && sender_id.nil?
        fail ArgumentError, "Missing the required parameter 'sender_id' when calling SendersApi.get_sender"
      end
      # resource path
      local_var_path = '/senders/{Sender ID}'.sub('{' + 'Sender ID' + '}', sender_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['AuthorizationKey', 'AuthorizationNonce', 'AuthorizationSecret', 'AuthorizationSignature']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SenderResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SendersApi#get_sender\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    def get_senders_all(opts = {})
      result = []
      response = get_senders(opts)
      result += response["object"]
      while next_page = response["meta"]["pagination"]["next_page"]
        response = get_senders(opts.merge(page: next_page))
        result += response["object"]
      end
      result
    end

    # Listing senders
    # Get a list of available senders
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page The page number to request (defaults to 1)
    # @option opts [Integer] :per The number of results to load per page (defaults to 10)
    # @option opts [String] :created_at_from Start date to filter recipients by created_at range Allows filtering results by the specified &#x60;created_at&#x60; timeframe.  Example: &#x60;/v1/recipients?created_at_from&#x3D;2018-06-06&amp;created_at_to&#x3D;2018-06-08&#x60;
    # @option opts [String] :created_at_to End date to filter recipients by created_at range Allows filtering results by the specified &#x60;created_at&#x60; timeframe.  Example: &#x60;/v1/recipients?created_at_from&#x3D;2018-06-06&amp;created_at_to&#x3D;2018-06-08&#x60;
    # @option opts [String] :external_id Allows filtering results by &#x60;external_id&#x60;.  Example: &#x60;/v1/senders?external_id&#x3D;26ec8517-2f0d-48c0-b74f-0bccb9ab3a87&#x60;
    # @return [SenderListResponse]
    def get_senders(opts = {})
      data, _status_code, _headers = get_senders_with_http_info(opts)
      data
    end

    # Listing senders
    # Get a list of available senders
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page The page number to request (defaults to 1)
    # @option opts [Integer] :per The number of results to load per page (defaults to 10)
    # @option opts [String] :created_at_from Start date to filter recipients by created_at range Allows filtering results by the specified &#x60;created_at&#x60; timeframe.  Example: &#x60;/v1/recipients?created_at_from&#x3D;2018-06-06&amp;created_at_to&#x3D;2018-06-08&#x60;
    # @option opts [String] :created_at_to End date to filter recipients by created_at range Allows filtering results by the specified &#x60;created_at&#x60; timeframe.  Example: &#x60;/v1/recipients?created_at_from&#x3D;2018-06-06&amp;created_at_to&#x3D;2018-06-08&#x60;
    # @option opts [String] :external_id Allows filtering results by &#x60;external_id&#x60;.  Example: &#x60;/v1/senders?external_id&#x3D;26ec8517-2f0d-48c0-b74f-0bccb9ab3a87&#x60;
    # @return [Array<(SenderListResponse, Fixnum, Hash)>] SenderListResponse data, response status code and response headers
    def get_senders_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SendersApi.get_senders ...'
      end
      # resource path
      local_var_path = '/senders'

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'per'] = opts[:'per'] if !opts[:'per'].nil?
      query_params[:'created_at_from'] = opts[:'created_at_from'] if !opts[:'created_at_from'].nil?
      query_params[:'created_at_to'] = opts[:'created_at_to'] if !opts[:'created_at_to'].nil?
      query_params[:'external_id'] = opts[:'external_id'] if !opts[:'external_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['AuthorizationKey', 'AuthorizationNonce', 'AuthorizationSecret', 'AuthorizationSignature']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SenderListResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SendersApi#get_senders\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # Updating a sender
    # Updates a single sender by the Sender ID
    # @param sender_id ID of the sender to get.  Example: &#x60;/v1/senders/bf9ff782-e182-45ac-abea-5bce83ad6670&#x60;
    # @param sender_request 
    # @param [Hash] opts the optional parameters
    # @return [SenderResponse]
    def patch_sender(sender_id, sender_request, opts = {})
      data, _status_code, _headers = patch_sender_with_http_info(sender_id, sender_request, opts)
      data
    end

    # Updating a sender
    # Updates a single sender by the Sender ID
    # @param sender_id ID of the sender to get.  Example: &#x60;/v1/senders/bf9ff782-e182-45ac-abea-5bce83ad6670&#x60;
    # @param sender_request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SenderResponse, Fixnum, Hash)>] SenderResponse data, response status code and response headers
    def patch_sender_with_http_info(sender_id, sender_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SendersApi.patch_sender ...'
      end
      # verify the required parameter 'sender_id' is set
      if @api_client.config.client_side_validation && sender_id.nil?
        fail ArgumentError, "Missing the required parameter 'sender_id' when calling SendersApi.patch_sender"
      end
      # verify the required parameter 'sender_request' is set
      if @api_client.config.client_side_validation && sender_request.nil?
        fail ArgumentError, "Missing the required parameter 'sender_request' when calling SendersApi.patch_sender"
      end
      # resource path
      local_var_path = '/senders/{Sender ID}'.sub('{' + 'Sender ID' + '}', sender_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(sender_request)
      auth_names = ['AuthorizationKey', 'AuthorizationNonce', 'AuthorizationSecret', 'AuthorizationSignature']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SenderResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SendersApi#patch_sender\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # Creating a sender
    # Creates a new sender in our system. 
    # @param sender_request 
    # @param [Hash] opts the optional parameters
    # @return [SenderResponse]
    def post_senders(sender_request, opts = {})
      data, _status_code, _headers = post_senders_with_http_info(sender_request, opts)
      data
    end

    # Creating a sender
    # Creates a new sender in our system. 
    # @param sender_request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SenderResponse, Fixnum, Hash)>] SenderResponse data, response status code and response headers
    def post_senders_with_http_info(sender_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SendersApi.post_senders ...'
      end
      # verify the required parameter 'sender_request' is set
      if @api_client.config.client_side_validation && sender_request.nil?
        fail ArgumentError, "Missing the required parameter 'sender_request' when calling SendersApi.post_senders"
      end
      # resource path
      local_var_path = '/senders'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(sender_request)
      auth_names = ['AuthorizationKey', 'AuthorizationNonce', 'AuthorizationSecret', 'AuthorizationSignature']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SenderResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SendersApi#post_senders\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
