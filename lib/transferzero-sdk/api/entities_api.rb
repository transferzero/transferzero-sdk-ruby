=begin
#BitPesa Private API

#API specification used for internal BitPesa endpoints

OpenAPI spec version: 1.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.0.0-beta3

=end

require 'uri'

module TransferZero
  class EntitiesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end


    # Listing entities
    # Get a list of entities
    # @param entity_type Type of entities to get.  Example: &#x60;/risk_assessment/entities/sender/summary?ids[]&#x3D;bf9ff782-e182-45ac-abea-5bce83ad6670&amp;ids[]&#x3D;344fb668-196d-43db-9d94-b34b7e6c7e0b&#x60;
    # @param ids Returns entities of specified entity(e.g Sender) id(s). This allows the fetching of entities for multiple e.g. senders  Example: &#x60;/risk_assessment/entities/sender?ids[]&#x3D;bf9ff782-e182-45ac-abea-5bce83ad6670&amp;ids[]&#x3D;344fb668-196d-43db-9d94-b34b7e6c7e0b&#x60;
    # @param [Hash] opts the optional parameters
    # @return [EntityListResponse]
    def get_entities(entity_type, ids, opts = {})
      data, _status_code, _headers = get_entities_with_http_info(entity_type, ids, opts)
      data
    end

    # Listing entities
    # Get a list of entities
    # @param entity_type Type of entities to get.  Example: &#x60;/risk_assessment/entities/sender/summary?ids[]&#x3D;bf9ff782-e182-45ac-abea-5bce83ad6670&amp;ids[]&#x3D;344fb668-196d-43db-9d94-b34b7e6c7e0b&#x60;
    # @param ids Returns entities of specified entity(e.g Sender) id(s). This allows the fetching of entities for multiple e.g. senders  Example: &#x60;/risk_assessment/entities/sender?ids[]&#x3D;bf9ff782-e182-45ac-abea-5bce83ad6670&amp;ids[]&#x3D;344fb668-196d-43db-9d94-b34b7e6c7e0b&#x60;
    # @param [Hash] opts the optional parameters
    # @return [Array<(EntityListResponse, Fixnum, Hash)>] EntityListResponse data, response status code and response headers
    def get_entities_with_http_info(entity_type, ids, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EntitiesApi.get_entities ...'
      end
      # verify the required parameter 'entity_type' is set
      if @api_client.config.client_side_validation && entity_type.nil?
        fail ArgumentError, "Missing the required parameter 'entity_type' when calling EntitiesApi.get_entities"
      end
      # verify the required parameter 'ids' is set
      if @api_client.config.client_side_validation && ids.nil?
        fail ArgumentError, "Missing the required parameter 'ids' when calling EntitiesApi.get_entities"
      end
      # resource path
      local_var_path = '/risk_assessment/entities/{Entity Type}/summary'.sub('{' + 'Entity Type' + '}', entity_type.to_s)

      # query parameters
      query_params = {}
      query_params[:'ids'] = @api_client.build_collection_param(ids, :multi)

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['AuthorizationKey', 'AuthorizationNonce', 'AuthorizationSecret', 'AuthorizationSignature']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EntityListResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EntitiesApi#get_entities\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # Listing entities by params (rating and/or state)
    # Get a list of entities scoped by the requested params (rating and/or state)
    # @param entity_type Type of entities to retrieve.  Example: &#x60;/risk_assessment/entities/sender/search?rating&#x3D;extremely_high&amp;state&#x3D;complete&#x60;
    # @param [Hash] opts the optional parameters
    # @option opts [String] :rating Returns a list of entities scoped by the Entity rating (rating param can be one of &#39;extremely_high&#39;, &#39;high_risk&#39;, &#39;medium_risk&#39; or &#39;low_risk&#39;)  Example: &#x60;/risk_assessment/entities/Sender::Business/search?rating&#x3D;extremely_high&#x60;
    # @option opts [String] :state Returns a list of entities scoped by the Entity state (state param can be one of &#39;complete&#39; or &#39;incomplete&#39;)  Example: &#x60;/risk_assessment/entities/Sender::Business/search?state&#x3D;complete&#x60;
    # @return [EntityListResponse]
    def get_entities_by_params(entity_type, opts = {})
      data, _status_code, _headers = get_entities_by_params_with_http_info(entity_type, opts)
      data
    end

    # Listing entities by params (rating and/or state)
    # Get a list of entities scoped by the requested params (rating and/or state)
    # @param entity_type Type of entities to retrieve.  Example: &#x60;/risk_assessment/entities/sender/search?rating&#x3D;extremely_high&amp;state&#x3D;complete&#x60;
    # @param [Hash] opts the optional parameters
    # @option opts [String] :rating Returns a list of entities scoped by the Entity rating (rating param can be one of &#39;extremely_high&#39;, &#39;high_risk&#39;, &#39;medium_risk&#39; or &#39;low_risk&#39;)  Example: &#x60;/risk_assessment/entities/Sender::Business/search?rating&#x3D;extremely_high&#x60;
    # @option opts [String] :state Returns a list of entities scoped by the Entity state (state param can be one of &#39;complete&#39; or &#39;incomplete&#39;)  Example: &#x60;/risk_assessment/entities/Sender::Business/search?state&#x3D;complete&#x60;
    # @return [Array<(EntityListResponse, Fixnum, Hash)>] EntityListResponse data, response status code and response headers
    def get_entities_by_params_with_http_info(entity_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EntitiesApi.get_entities_by_params ...'
      end
      # verify the required parameter 'entity_type' is set
      if @api_client.config.client_side_validation && entity_type.nil?
        fail ArgumentError, "Missing the required parameter 'entity_type' when calling EntitiesApi.get_entities_by_params"
      end
      # resource path
      local_var_path = '/risk_assessment/entities/{Entity Type}/search'.sub('{' + 'Entity Type' + '}', entity_type.to_s)

      # query parameters
      query_params = {}
      query_params[:'rating'] = opts[:'rating'] if !opts[:'rating'].nil?
      query_params[:'state'] = opts[:'state'] if !opts[:'state'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['AuthorizationKey', 'AuthorizationNonce', 'AuthorizationSecret', 'AuthorizationSignature']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EntityListResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EntitiesApi#get_entities_by_params\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # Fetching a entity
    # Returns a single entity by the Entity ID
    # @param entity_type Type of entities to get.  Example: &#x60;/risk_assessment/entities/sender/bf9ff782-e182-45ac-abea-5bce83ad6670&#x60;
    # @param entity_id ID of the entity to get.  Example: &#x60;/risk_assessment/entities/sender/bf9ff782-e182-45ac-abea-5bce83ad6670&#x60;
    # @param [Hash] opts the optional parameters
    # @return [EntityCreateResponse]
    def get_entity(entity_type, entity_id, opts = {})
      data, _status_code, _headers = get_entity_with_http_info(entity_type, entity_id, opts)
      data
    end

    # Fetching a entity
    # Returns a single entity by the Entity ID
    # @param entity_type Type of entities to get.  Example: &#x60;/risk_assessment/entities/sender/bf9ff782-e182-45ac-abea-5bce83ad6670&#x60;
    # @param entity_id ID of the entity to get.  Example: &#x60;/risk_assessment/entities/sender/bf9ff782-e182-45ac-abea-5bce83ad6670&#x60;
    # @param [Hash] opts the optional parameters
    # @return [Array<(EntityCreateResponse, Fixnum, Hash)>] EntityCreateResponse data, response status code and response headers
    def get_entity_with_http_info(entity_type, entity_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EntitiesApi.get_entity ...'
      end
      # verify the required parameter 'entity_type' is set
      if @api_client.config.client_side_validation && entity_type.nil?
        fail ArgumentError, "Missing the required parameter 'entity_type' when calling EntitiesApi.get_entity"
      end
      # verify the required parameter 'entity_id' is set
      if @api_client.config.client_side_validation && entity_id.nil?
        fail ArgumentError, "Missing the required parameter 'entity_id' when calling EntitiesApi.get_entity"
      end
      # resource path
      local_var_path = '/risk_assessment/entities/{Entity Type}/{Entity ID}'.sub('{' + 'Entity Type' + '}', entity_type.to_s).sub('{' + 'Entity ID' + '}', entity_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['AuthorizationKey', 'AuthorizationNonce', 'AuthorizationSecret', 'AuthorizationSignature']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EntityCreateResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EntitiesApi#get_entity\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # Updating an entity
    # Updates a single entity by the Entity ID
    # @param entity_type Type of entities to get.  Example: &#x60;/risk_assessment/entities/sender/bf9ff782-e182-45ac-abea-5bce83ad6670&#x60;
    # @param entity_id ID of the entity to get.  Example: &#x60;/risk_assessment/entities/sender/bf9ff782-e182-45ac-abea-5bce83ad6670&#x60;
    # @param entity_update_request 
    # @param [Hash] opts the optional parameters
    # @return [EntityUpdateResponse]
    def patch_entity(entity_type, entity_id, entity_update_request, opts = {})
      data, _status_code, _headers = patch_entity_with_http_info(entity_type, entity_id, entity_update_request, opts)
      data
    end

    # Updating an entity
    # Updates a single entity by the Entity ID
    # @param entity_type Type of entities to get.  Example: &#x60;/risk_assessment/entities/sender/bf9ff782-e182-45ac-abea-5bce83ad6670&#x60;
    # @param entity_id ID of the entity to get.  Example: &#x60;/risk_assessment/entities/sender/bf9ff782-e182-45ac-abea-5bce83ad6670&#x60;
    # @param entity_update_request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EntityUpdateResponse, Fixnum, Hash)>] EntityUpdateResponse data, response status code and response headers
    def patch_entity_with_http_info(entity_type, entity_id, entity_update_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EntitiesApi.patch_entity ...'
      end
      # verify the required parameter 'entity_type' is set
      if @api_client.config.client_side_validation && entity_type.nil?
        fail ArgumentError, "Missing the required parameter 'entity_type' when calling EntitiesApi.patch_entity"
      end
      # verify the required parameter 'entity_id' is set
      if @api_client.config.client_side_validation && entity_id.nil?
        fail ArgumentError, "Missing the required parameter 'entity_id' when calling EntitiesApi.patch_entity"
      end
      # verify the required parameter 'entity_update_request' is set
      if @api_client.config.client_side_validation && entity_update_request.nil?
        fail ArgumentError, "Missing the required parameter 'entity_update_request' when calling EntitiesApi.patch_entity"
      end
      # resource path
      local_var_path = '/risk_assessment/entities/{Entity Type}/{Entity ID}'.sub('{' + 'Entity Type' + '}', entity_type.to_s).sub('{' + 'Entity ID' + '}', entity_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(entity_update_request)
      auth_names = ['AuthorizationKey', 'AuthorizationNonce', 'AuthorizationSecret', 'AuthorizationSignature']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EntityUpdateResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EntitiesApi#patch_entity\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # Creating an entity
    # Creates a new entity. 
    # @param entity_type Type of entity to create.
    # @param entity_id ID of entity type to create entity for.  Example: &#x60;/risk_assessment/entities/sender/e6f67a67-b2c2-4897-ad58-9fc3a9d8d991&#x60;
    # @param entity_create_request 
    # @param [Hash] opts the optional parameters
    # @return [EntityCreateResponse]
    def post_entity(entity_type, entity_id, entity_create_request, opts = {})
      data, _status_code, _headers = post_entity_with_http_info(entity_type, entity_id, entity_create_request, opts)
      data
    end

    # Creating an entity
    # Creates a new entity. 
    # @param entity_type Type of entity to create.
    # @param entity_id ID of entity type to create entity for.  Example: &#x60;/risk_assessment/entities/sender/e6f67a67-b2c2-4897-ad58-9fc3a9d8d991&#x60;
    # @param entity_create_request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EntityCreateResponse, Fixnum, Hash)>] EntityCreateResponse data, response status code and response headers
    def post_entity_with_http_info(entity_type, entity_id, entity_create_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: EntitiesApi.post_entity ...'
      end
      # verify the required parameter 'entity_type' is set
      if @api_client.config.client_side_validation && entity_type.nil?
        fail ArgumentError, "Missing the required parameter 'entity_type' when calling EntitiesApi.post_entity"
      end
      # verify the required parameter 'entity_id' is set
      if @api_client.config.client_side_validation && entity_id.nil?
        fail ArgumentError, "Missing the required parameter 'entity_id' when calling EntitiesApi.post_entity"
      end
      # verify the required parameter 'entity_create_request' is set
      if @api_client.config.client_side_validation && entity_create_request.nil?
        fail ArgumentError, "Missing the required parameter 'entity_create_request' when calling EntitiesApi.post_entity"
      end
      # resource path
      local_var_path = '/risk_assessment/entities/{Entity Type}/{Entity ID}'.sub('{' + 'Entity Type' + '}', entity_type.to_s).sub('{' + 'Entity ID' + '}', entity_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(entity_create_request)
      auth_names = ['AuthorizationKey', 'AuthorizationNonce', 'AuthorizationSecret', 'AuthorizationSignature']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EntityCreateResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EntitiesApi#post_entity\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
