=begin
#BitPesa Private API

#API specification used for internal BitPesa endpoints

OpenAPI spec version: 1.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.0.0-beta3

=end

require 'uri'

module TransferZero
  class TransactionRequestsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end


    # Adding a document to a transaction request (deprecated)
    # Adds a new document to a transaction request 
    # @param transaction_request_id ID of the transaction request to add the document.  Example: &#x60;/v1/info/transaction_requests/bf9ff782-e182-45ac-abea-5bce83ad6670/add_document?document_id&#x3D;26ec8517-2f0d-48c0-b74f-0bccb9ab3a87&#x60;
    # @param document_id The ID of the document to be added to the transaction request.  Example: &#x60;/v1/info/transaction_requests/bf9ff782-e182-45ac-abea-5bce83ad6670/add_document?document_id&#x3D;26ec8517-2f0d-48c0-b74f-0bccb9ab3a87&#x60;
    # @param [Hash] opts the optional parameters
    # @return [DocumentResponse]
    def add_document_transaction_request(transaction_request_id, document_id, opts = {})
      data, _status_code, _headers = add_document_transaction_request_with_http_info(transaction_request_id, document_id, opts)
      data
    end

    # Adding a document to a transaction request (deprecated)
    # Adds a new document to a transaction request 
    # @param transaction_request_id ID of the transaction request to add the document.  Example: &#x60;/v1/info/transaction_requests/bf9ff782-e182-45ac-abea-5bce83ad6670/add_document?document_id&#x3D;26ec8517-2f0d-48c0-b74f-0bccb9ab3a87&#x60;
    # @param document_id The ID of the document to be added to the transaction request.  Example: &#x60;/v1/info/transaction_requests/bf9ff782-e182-45ac-abea-5bce83ad6670/add_document?document_id&#x3D;26ec8517-2f0d-48c0-b74f-0bccb9ab3a87&#x60;
    # @param [Hash] opts the optional parameters
    # @return [Array<(DocumentResponse, Fixnum, Hash)>] DocumentResponse data, response status code and response headers
    def add_document_transaction_request_with_http_info(transaction_request_id, document_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TransactionRequestsApi.add_document_transaction_request ...'
      end
      # verify the required parameter 'transaction_request_id' is set
      if @api_client.config.client_side_validation && transaction_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'transaction_request_id' when calling TransactionRequestsApi.add_document_transaction_request"
      end
      # verify the required parameter 'document_id' is set
      if @api_client.config.client_side_validation && document_id.nil?
        fail ArgumentError, "Missing the required parameter 'document_id' when calling TransactionRequestsApi.add_document_transaction_request"
      end
      # resource path
      local_var_path = '/transaction_requests/{Transaction Request ID}/add_document'.sub('{' + 'Transaction Request ID' + '}', transaction_request_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'document_id'] = document_id

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['AuthorizationKey', 'AuthorizationNonce', 'AuthorizationSecret', 'AuthorizationSignature']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DocumentResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TransactionRequestsApi#add_document_transaction_request\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # Cancelling a transaction request
    # Cancels a transaction request 
    # @param transaction_request_id ID of the transaction request to cancel.  Example: &#x60;/v1/transaction_requests/bf9ff782-e182-45ac-abea-5bce83ad6670/cancel&#x60;
    # @param reason_cancellation Reason for the transaction request to cancel.  Example: &#x60;Not enough funds&#x60;
    # @param [Hash] opts the optional parameters
    # @return [TransactionReqResponse]
    def cancel_transaction_request(transaction_request_id, reason_cancellation, opts = {})
      data, _status_code, _headers = cancel_transaction_request_with_http_info(transaction_request_id, reason_cancellation, opts)
      data
    end

    # Cancelling a transaction request
    # Cancels a transaction request 
    # @param transaction_request_id ID of the transaction request to cancel.  Example: &#x60;/v1/transaction_requests/bf9ff782-e182-45ac-abea-5bce83ad6670/cancel&#x60;
    # @param reason_cancellation Reason for the transaction request to cancel.  Example: &#x60;Not enough funds&#x60;
    # @param [Hash] opts the optional parameters
    # @return [Array<(TransactionReqResponse, Fixnum, Hash)>] TransactionReqResponse data, response status code and response headers
    def cancel_transaction_request_with_http_info(transaction_request_id, reason_cancellation, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TransactionRequestsApi.cancel_transaction_request ...'
      end
      # verify the required parameter 'transaction_request_id' is set
      if @api_client.config.client_side_validation && transaction_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'transaction_request_id' when calling TransactionRequestsApi.cancel_transaction_request"
      end
      # verify the required parameter 'reason_cancellation' is set
      if @api_client.config.client_side_validation && reason_cancellation.nil?
        fail ArgumentError, "Missing the required parameter 'reason_cancellation' when calling TransactionRequestsApi.cancel_transaction_request"
      end
      # resource path
      local_var_path = '/transaction_requests/{Transaction Request ID}/cancel'.sub('{' + 'Transaction Request ID' + '}', transaction_request_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'reason_cancellation'] = reason_cancellation

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['AuthorizationKey', 'AuthorizationNonce', 'AuthorizationSecret', 'AuthorizationSignature']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TransactionReqResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TransactionRequestsApi#cancel_transaction_request\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # Confirming a transaction request
    # Confirms a new transaction request 
    # @param transaction_request_id ID of the transaction request to confirm.  Example: &#x60;/v1/transaction_requests/bf9ff782-e182-45ac-abea-5bce83ad6670/confirm&#x60;
    # @param [Hash] opts the optional parameters
    # @return [TransactionReqResponse]
    def confirm_transaction_request(transaction_request_id, opts = {})
      data, _status_code, _headers = confirm_transaction_request_with_http_info(transaction_request_id, opts)
      data
    end

    # Confirming a transaction request
    # Confirms a new transaction request 
    # @param transaction_request_id ID of the transaction request to confirm.  Example: &#x60;/v1/transaction_requests/bf9ff782-e182-45ac-abea-5bce83ad6670/confirm&#x60;
    # @param [Hash] opts the optional parameters
    # @return [Array<(TransactionReqResponse, Fixnum, Hash)>] TransactionReqResponse data, response status code and response headers
    def confirm_transaction_request_with_http_info(transaction_request_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TransactionRequestsApi.confirm_transaction_request ...'
      end
      # verify the required parameter 'transaction_request_id' is set
      if @api_client.config.client_side_validation && transaction_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'transaction_request_id' when calling TransactionRequestsApi.confirm_transaction_request"
      end
      # resource path
      local_var_path = '/transaction_requests/{Transaction Request ID}/confirm'.sub('{' + 'Transaction Request ID' + '}', transaction_request_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['AuthorizationKey', 'AuthorizationNonce', 'AuthorizationSecret', 'AuthorizationSignature']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TransactionReqResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TransactionRequestsApi#confirm_transaction_request\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # Fetching a transaction request
    # Returns a single transaction request by the Transaction Request ID
    # @param transaction_request_id ID of the transaction request to get.  Example: &#x60;/v1/transaction_requests/bf9ff782-e182-45ac-abea-5bce83ad6670&#x60;
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :versioned If false is passed, returns a Transaction request containing a not cached Transaction object  Example: &#x60;/v1/transaction_requests/bf9ff782-e182-45ac-abea-5bce83ad6670?versioned&#x3D;false&#x60;
    # @return [TransactionReqResponse]
    def get_transaction_request(transaction_request_id, opts = {})
      data, _status_code, _headers = get_transaction_request_with_http_info(transaction_request_id, opts)
      data
    end

    # Fetching a transaction request
    # Returns a single transaction request by the Transaction Request ID
    # @param transaction_request_id ID of the transaction request to get.  Example: &#x60;/v1/transaction_requests/bf9ff782-e182-45ac-abea-5bce83ad6670&#x60;
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :versioned If false is passed, returns a Transaction request containing a not cached Transaction object  Example: &#x60;/v1/transaction_requests/bf9ff782-e182-45ac-abea-5bce83ad6670?versioned&#x3D;false&#x60;
    # @return [Array<(TransactionReqResponse, Fixnum, Hash)>] TransactionReqResponse data, response status code and response headers
    def get_transaction_request_with_http_info(transaction_request_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TransactionRequestsApi.get_transaction_request ...'
      end
      # verify the required parameter 'transaction_request_id' is set
      if @api_client.config.client_side_validation && transaction_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'transaction_request_id' when calling TransactionRequestsApi.get_transaction_request"
      end
      # resource path
      local_var_path = '/transaction_requests/{Transaction Request ID}'.sub('{' + 'Transaction Request ID' + '}', transaction_request_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'versioned'] = opts[:'versioned'] if !opts[:'versioned'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['AuthorizationKey', 'AuthorizationNonce', 'AuthorizationSecret', 'AuthorizationSignature']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TransactionReqResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TransactionRequestsApi#get_transaction_request\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # Listing transaction requests
    # Get a list of transaction requests
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page The page number to request (defaults to 1)
    # @option opts [Integer] :per The number of results to load per page (defaults to 10)
    # @option opts [Array<String>] :state Returns transaction requests with specified states.  Example: &#x60;/v1/transaction_requests?state[]&#x3D;pending&amp;state[]&#x3D;modified&#x60;
    # @option opts [Array<String>] :currency Returns transaction requests with specified input_currency.  Example: &#x60;/v1/transaction_requests?currency[]&#x3D;USD&#x60;
    # @option opts [String] :created_at_from Returns transaction requests with specified created_at lower limit.  Example: &#x60;/v1/transaction_requests?created_at_from&#x3D;2018-06-09&#x60;
    # @option opts [String] :created_at_to Returns transaction requests with specified created_at upper limit.  Example: &#x60;/v1/transaction_requests?created_at_to&#x3D;2018-06-08&#x60;
    # @option opts [String] :amount_from Returns transaction requests with specified amount lower limit.  Example: &#x60;/v1/transaction_requests?currency&#x3D;NGN&amp;amount_from&#x3D;2.4319983&#x60;
    # @option opts [String] :amount_to Returns transaction requests with specified amount upper limit.  Example: &#x60;/v1/transaction_requests?currency&#x3D;NGN&amp;amount_to&#x3D;2.4319985&#x60;
    # @option opts [String] :sender_id Returns transaction requests for the specified sender.  Example: &#x60;/v1/transaction_requests?sender_id&#x3D;b41d3cb7-6c54-4245-85fc-8e30690eb0f7&#x60;
    # @option opts [Boolean] :versioned If false is passed, returns Transaction requests containing not cached Transaction objects  Example: &#x60;/v1/transaction_requests?versioned&#x3D;false&#x60;
    # @option opts [Array<String>] :tag Returns transaction requests with the specified tag(s). Tags are optional labels assigned to transaction requests for organizational purposes  Example: &#x60;/v1/transaction_requests?tag[]&#x3D;square&#x60;
    # @option opts [Array<String>] :ids Returns transaction requests with the specified id(s). This allows the fetching of multiple transaction requests by ids for efficiency  Example: &#x60;/v1/transaction_requests?ids[]&#x3D;b41d3cb7-6c54-4245-85fc-8e30690eb0f7&#x60;
    # @option opts [Array<String>] :included Returns transaction requests with the specified payout currencies.  Example: &#x60;/v1/transaction_requests?included[]&#x3D;KES&#x60;
    # @option opts [Array<String>] :excluded Returns transaction requests without the specified payout currencies.  Example: &#x60;/v1/transaction_requests?excluded[]&#x3D;KES&#x60;
    # @return [TransactionReqListResponse]
    def get_transaction_requests(opts = {})
      data, _status_code, _headers = get_transaction_requests_with_http_info(opts)
      data
    end

    # Listing transaction requests
    # Get a list of transaction requests
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page The page number to request (defaults to 1)
    # @option opts [Integer] :per The number of results to load per page (defaults to 10)
    # @option opts [Array<String>] :state Returns transaction requests with specified states.  Example: &#x60;/v1/transaction_requests?state[]&#x3D;pending&amp;state[]&#x3D;modified&#x60;
    # @option opts [Array<String>] :currency Returns transaction requests with specified input_currency.  Example: &#x60;/v1/transaction_requests?currency[]&#x3D;USD&#x60;
    # @option opts [String] :created_at_from Returns transaction requests with specified created_at lower limit.  Example: &#x60;/v1/transaction_requests?created_at_from&#x3D;2018-06-09&#x60;
    # @option opts [String] :created_at_to Returns transaction requests with specified created_at upper limit.  Example: &#x60;/v1/transaction_requests?created_at_to&#x3D;2018-06-08&#x60;
    # @option opts [String] :amount_from Returns transaction requests with specified amount lower limit.  Example: &#x60;/v1/transaction_requests?currency&#x3D;NGN&amp;amount_from&#x3D;2.4319983&#x60;
    # @option opts [String] :amount_to Returns transaction requests with specified amount upper limit.  Example: &#x60;/v1/transaction_requests?currency&#x3D;NGN&amp;amount_to&#x3D;2.4319985&#x60;
    # @option opts [String] :sender_id Returns transaction requests for the specified sender.  Example: &#x60;/v1/transaction_requests?sender_id&#x3D;b41d3cb7-6c54-4245-85fc-8e30690eb0f7&#x60;
    # @option opts [Boolean] :versioned If false is passed, returns Transaction requests containing not cached Transaction objects  Example: &#x60;/v1/transaction_requests?versioned&#x3D;false&#x60;
    # @option opts [Array<String>] :tag Returns transaction requests with the specified tag(s). Tags are optional labels assigned to transaction requests for organizational purposes  Example: &#x60;/v1/transaction_requests?tag[]&#x3D;square&#x60;
    # @option opts [Array<String>] :ids Returns transaction requests with the specified id(s). This allows the fetching of multiple transaction requests by ids for efficiency  Example: &#x60;/v1/transaction_requests?ids[]&#x3D;b41d3cb7-6c54-4245-85fc-8e30690eb0f7&#x60;
    # @option opts [Array<String>] :included Returns transaction requests with the specified payout currencies.  Example: &#x60;/v1/transaction_requests?included[]&#x3D;KES&#x60;
    # @option opts [Array<String>] :excluded Returns transaction requests without the specified payout currencies.  Example: &#x60;/v1/transaction_requests?excluded[]&#x3D;KES&#x60;
    # @return [Array<(TransactionReqListResponse, Fixnum, Hash)>] TransactionReqListResponse data, response status code and response headers
    def get_transaction_requests_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TransactionRequestsApi.get_transaction_requests ...'
      end
      # resource path
      local_var_path = '/transaction_requests'

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'per'] = opts[:'per'] if !opts[:'per'].nil?
      query_params[:'state'] = @api_client.build_collection_param(opts[:'state'], :multi) if !opts[:'state'].nil?
      query_params[:'currency'] = @api_client.build_collection_param(opts[:'currency'], :multi) if !opts[:'currency'].nil?
      query_params[:'created_at_from'] = opts[:'created_at_from'] if !opts[:'created_at_from'].nil?
      query_params[:'created_at_to'] = opts[:'created_at_to'] if !opts[:'created_at_to'].nil?
      query_params[:'amount_from'] = opts[:'amount_from'] if !opts[:'amount_from'].nil?
      query_params[:'amount_to'] = opts[:'amount_to'] if !opts[:'amount_to'].nil?
      query_params[:'sender_id'] = opts[:'sender_id'] if !opts[:'sender_id'].nil?
      query_params[:'versioned'] = opts[:'versioned'] if !opts[:'versioned'].nil?
      query_params[:'tag'] = @api_client.build_collection_param(opts[:'tag'], :multi) if !opts[:'tag'].nil?
      query_params[:'ids'] = @api_client.build_collection_param(opts[:'ids'], :multi) if !opts[:'ids'].nil?
      query_params[:'included'] = @api_client.build_collection_param(opts[:'included'], :multi) if !opts[:'included'].nil?
      query_params[:'excluded'] = @api_client.build_collection_param(opts[:'excluded'], :multi) if !opts[:'excluded'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['AuthorizationKey', 'AuthorizationNonce', 'AuthorizationSecret', 'AuthorizationSignature']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TransactionReqListResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TransactionRequestsApi#get_transaction_requests\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # Creating a transaction request
    # Creates a new transaction request 
    # @param transaction_req_request 
    # @param [Hash] opts the optional parameters
    # @return [TransactionReqResponse]
    def post_transaction_request(transaction_req_request, opts = {})
      data, _status_code, _headers = post_transaction_request_with_http_info(transaction_req_request, opts)
      data
    end

    # Creating a transaction request
    # Creates a new transaction request 
    # @param transaction_req_request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TransactionReqResponse, Fixnum, Hash)>] TransactionReqResponse data, response status code and response headers
    def post_transaction_request_with_http_info(transaction_req_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TransactionRequestsApi.post_transaction_request ...'
      end
      # verify the required parameter 'transaction_req_request' is set
      if @api_client.config.client_side_validation && transaction_req_request.nil?
        fail ArgumentError, "Missing the required parameter 'transaction_req_request' when calling TransactionRequestsApi.post_transaction_request"
      end
      # resource path
      local_var_path = '/transaction_requests'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(transaction_req_request)
      auth_names = ['AuthorizationKey', 'AuthorizationNonce', 'AuthorizationSecret', 'AuthorizationSignature']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TransactionReqResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TransactionRequestsApi#post_transaction_request\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # Adding a document to a transaction request
    # Adds a new document to a transaction request 
    # @param transaction_request_id ID of the transaction request to add the document.  Example: &#x60;/v1/transaction_requests/bf9ff782-e182-45ac-abea-5bce83ad6670/documents/26ec8517-2f0d-48c0-b74f-0bccb9ab3a87/add&#x60;
    # @param document_id The ID of the document to be added to the transaction request.  Example: &#x60;/v1/transaction_requests/bf9ff782-e182-45ac-abea-5bce83ad6670/documents/26ec8517-2f0d-48c0-b74f-0bccb9ab3a87/add&#x60;
    # @param [Hash] opts the optional parameters
    # @return [DocumentResponse]
    def restful_add_document_transaction_request(transaction_request_id, document_id, opts = {})
      data, _status_code, _headers = restful_add_document_transaction_request_with_http_info(transaction_request_id, document_id, opts)
      data
    end

    # Adding a document to a transaction request
    # Adds a new document to a transaction request 
    # @param transaction_request_id ID of the transaction request to add the document.  Example: &#x60;/v1/transaction_requests/bf9ff782-e182-45ac-abea-5bce83ad6670/documents/26ec8517-2f0d-48c0-b74f-0bccb9ab3a87/add&#x60;
    # @param document_id The ID of the document to be added to the transaction request.  Example: &#x60;/v1/transaction_requests/bf9ff782-e182-45ac-abea-5bce83ad6670/documents/26ec8517-2f0d-48c0-b74f-0bccb9ab3a87/add&#x60;
    # @param [Hash] opts the optional parameters
    # @return [Array<(DocumentResponse, Fixnum, Hash)>] DocumentResponse data, response status code and response headers
    def restful_add_document_transaction_request_with_http_info(transaction_request_id, document_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TransactionRequestsApi.restful_add_document_transaction_request ...'
      end
      # verify the required parameter 'transaction_request_id' is set
      if @api_client.config.client_side_validation && transaction_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'transaction_request_id' when calling TransactionRequestsApi.restful_add_document_transaction_request"
      end
      # verify the required parameter 'document_id' is set
      if @api_client.config.client_side_validation && document_id.nil?
        fail ArgumentError, "Missing the required parameter 'document_id' when calling TransactionRequestsApi.restful_add_document_transaction_request"
      end
      # resource path
      local_var_path = '/transaction_requests/{Transaction Request ID}/documents/{Document ID}/add'.sub('{' + 'Transaction Request ID' + '}', transaction_request_id.to_s).sub('{' + 'Document ID' + '}', document_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['AuthorizationKey', 'AuthorizationNonce', 'AuthorizationSecret', 'AuthorizationSignature']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DocumentResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TransactionRequestsApi#restful_add_document_transaction_request\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # Specifies the limits for transaction requests
    # Specifies the minimum and maximum limits for transaction requests
    # @param [Hash] opts the optional parameters
    # @return [TransactionReqLimitsResponse]
    def transaction_request_limits(opts = {})
      data, _status_code, _headers = transaction_request_limits_with_http_info(opts)
      data
    end

    # Specifies the limits for transaction requests
    # Specifies the minimum and maximum limits for transaction requests
    # @param [Hash] opts the optional parameters
    # @return [Array<(TransactionReqLimitsResponse, Fixnum, Hash)>] TransactionReqLimitsResponse data, response status code and response headers
    def transaction_request_limits_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TransactionRequestsApi.transaction_request_limits ...'
      end
      # resource path
      local_var_path = '/transaction_requests/limits'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['AuthorizationKey', 'AuthorizationNonce', 'AuthorizationSecret', 'AuthorizationSignature']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TransactionReqLimitsResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TransactionRequestsApi#transaction_request_limits\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # Validates a transaction request payload
    # Validates fields in a transaction request payload and displays invalid or missing fields
    # @param transaction_req_request 
    # @param [Hash] opts the optional parameters
    # @return [TransactionReqResponse]
    def validate_transaction_requests(transaction_req_request, opts = {})
      data, _status_code, _headers = validate_transaction_requests_with_http_info(transaction_req_request, opts)
      data
    end

    # Validates a transaction request payload
    # Validates fields in a transaction request payload and displays invalid or missing fields
    # @param transaction_req_request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TransactionReqResponse, Fixnum, Hash)>] TransactionReqResponse data, response status code and response headers
    def validate_transaction_requests_with_http_info(transaction_req_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TransactionRequestsApi.validate_transaction_requests ...'
      end
      # verify the required parameter 'transaction_req_request' is set
      if @api_client.config.client_side_validation && transaction_req_request.nil?
        fail ArgumentError, "Missing the required parameter 'transaction_req_request' when calling TransactionRequestsApi.validate_transaction_requests"
      end
      # resource path
      local_var_path = '/transaction_requests/validate'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(transaction_req_request)
      auth_names = ['AuthorizationKey', 'AuthorizationNonce', 'AuthorizationSecret', 'AuthorizationSignature']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TransactionReqResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TransactionRequestsApi#validate_transaction_requests\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
