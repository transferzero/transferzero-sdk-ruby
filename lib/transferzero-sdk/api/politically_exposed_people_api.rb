=begin
#BitPesa Private API

#API specification used for internal BitPesa endpoints

OpenAPI spec version: 1.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.0.0-beta3

=end

require 'uri'

module TransferZero
  class PoliticallyExposedPeopleApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end


    # Deleting a politically exposed person
    # Deletes a single politically exposed person given the PEP ID.
    # @param politically_exposed_person_id The ID of the Politically Exposed Person you want to delete.  Example: &#x60;/v1/politically_exposed_people/1&#x60;
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_politically_exposed_person(politically_exposed_person_id, opts = {})
      delete_politically_exposed_person_with_http_info(politically_exposed_person_id, opts)
      nil
    end

    # Deleting a politically exposed person
    # Deletes a single politically exposed person given the PEP ID.
    # @param politically_exposed_person_id The ID of the Politically Exposed Person you want to delete.  Example: &#x60;/v1/politically_exposed_people/1&#x60;
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_politically_exposed_person_with_http_info(politically_exposed_person_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PoliticallyExposedPeopleApi.delete_politically_exposed_person ...'
      end
      # verify the required parameter 'politically_exposed_person_id' is set
      if @api_client.config.client_side_validation && politically_exposed_person_id.nil?
        fail ArgumentError, "Missing the required parameter 'politically_exposed_person_id' when calling PoliticallyExposedPeopleApi.delete_politically_exposed_person"
      end
      # resource path
      local_var_path = '/politically_exposed_people/{PoliticallyExposedPerson ID}'.sub('{' + 'PoliticallyExposedPerson ID' + '}', politically_exposed_person_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['AuthorizationKey', 'AuthorizationNonce', 'AuthorizationSecret', 'AuthorizationSignature']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PoliticallyExposedPeopleApi#delete_politically_exposed_person\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # Listing Politically Exposed People
    # Get a list of politically exposed people
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sender_id The ID of the Sender to whom the politically exposed people are attached to.  Example: &#x60;/v1/politically_exposed_people?sender_id&#x3D;344fb668-196d-43db-9d94-b34b7e6c7e0b&#x60;
    # @return [PoliticallyExposedPersonListResponse]
    def get_politically_exposed_people(opts = {})
      data, _status_code, _headers = get_politically_exposed_people_with_http_info(opts)
      data
    end

    # Listing Politically Exposed People
    # Get a list of politically exposed people
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sender_id The ID of the Sender to whom the politically exposed people are attached to.  Example: &#x60;/v1/politically_exposed_people?sender_id&#x3D;344fb668-196d-43db-9d94-b34b7e6c7e0b&#x60;
    # @return [Array<(PoliticallyExposedPersonListResponse, Fixnum, Hash)>] PoliticallyExposedPersonListResponse data, response status code and response headers
    def get_politically_exposed_people_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PoliticallyExposedPeopleApi.get_politically_exposed_people ...'
      end
      # resource path
      local_var_path = '/politically_exposed_people'

      # query parameters
      query_params = {}
      query_params[:'sender_id'] = opts[:'sender_id'] if !opts[:'sender_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['AuthorizationKey', 'AuthorizationNonce', 'AuthorizationSecret', 'AuthorizationSignature']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PoliticallyExposedPersonListResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PoliticallyExposedPeopleApi#get_politically_exposed_people\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # Fetching a politically exposed person
    # Returns a single politically exposed person given the PEP ID. Can optionally be filtered using the sender_id query parameter.
    # @param politically_exposed_person_id The ID of the Politically Exposed Person you want to retrieve.  Example: &#x60;/v1/politically_exposed_people/1?sender_id&#x3D;344fb668-196d-43db-9d94-b34b7e6c7e0b&#x60;
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sender_id The ID of the Sender to whom the politically exposed person is attached to.
    # @return [PoliticallyExposedPersonResponse]
    def get_politically_exposed_person(politically_exposed_person_id, opts = {})
      data, _status_code, _headers = get_politically_exposed_person_with_http_info(politically_exposed_person_id, opts)
      data
    end

    # Fetching a politically exposed person
    # Returns a single politically exposed person given the PEP ID. Can optionally be filtered using the sender_id query parameter.
    # @param politically_exposed_person_id The ID of the Politically Exposed Person you want to retrieve.  Example: &#x60;/v1/politically_exposed_people/1?sender_id&#x3D;344fb668-196d-43db-9d94-b34b7e6c7e0b&#x60;
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sender_id The ID of the Sender to whom the politically exposed person is attached to.
    # @return [Array<(PoliticallyExposedPersonResponse, Fixnum, Hash)>] PoliticallyExposedPersonResponse data, response status code and response headers
    def get_politically_exposed_person_with_http_info(politically_exposed_person_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PoliticallyExposedPeopleApi.get_politically_exposed_person ...'
      end
      # verify the required parameter 'politically_exposed_person_id' is set
      if @api_client.config.client_side_validation && politically_exposed_person_id.nil?
        fail ArgumentError, "Missing the required parameter 'politically_exposed_person_id' when calling PoliticallyExposedPeopleApi.get_politically_exposed_person"
      end
      # resource path
      local_var_path = '/politically_exposed_people/{PoliticallyExposedPerson ID}'.sub('{' + 'PoliticallyExposedPerson ID' + '}', politically_exposed_person_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'sender_id'] = opts[:'sender_id'] if !opts[:'sender_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['AuthorizationKey', 'AuthorizationNonce', 'AuthorizationSecret', 'AuthorizationSignature']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PoliticallyExposedPersonResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PoliticallyExposedPeopleApi#get_politically_exposed_person\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # Updating a politically exposed person
    # Updates a single politically exposed person given the PEP ID.
    # @param politically_exposed_person_id The ID of the Politically Exposed Person you want to update.  Example: &#x60;/v1/politically_exposed_people/1&#x60;
    # @param politically_exposed_person 
    # @param [Hash] opts the optional parameters
    # @return [PoliticallyExposedPersonResponse]
    def patch_politically_exposed_person(politically_exposed_person_id, politically_exposed_person, opts = {})
      data, _status_code, _headers = patch_politically_exposed_person_with_http_info(politically_exposed_person_id, politically_exposed_person, opts)
      data
    end

    # Updating a politically exposed person
    # Updates a single politically exposed person given the PEP ID.
    # @param politically_exposed_person_id The ID of the Politically Exposed Person you want to update.  Example: &#x60;/v1/politically_exposed_people/1&#x60;
    # @param politically_exposed_person 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PoliticallyExposedPersonResponse, Fixnum, Hash)>] PoliticallyExposedPersonResponse data, response status code and response headers
    def patch_politically_exposed_person_with_http_info(politically_exposed_person_id, politically_exposed_person, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PoliticallyExposedPeopleApi.patch_politically_exposed_person ...'
      end
      # verify the required parameter 'politically_exposed_person_id' is set
      if @api_client.config.client_side_validation && politically_exposed_person_id.nil?
        fail ArgumentError, "Missing the required parameter 'politically_exposed_person_id' when calling PoliticallyExposedPeopleApi.patch_politically_exposed_person"
      end
      # verify the required parameter 'politically_exposed_person' is set
      if @api_client.config.client_side_validation && politically_exposed_person.nil?
        fail ArgumentError, "Missing the required parameter 'politically_exposed_person' when calling PoliticallyExposedPeopleApi.patch_politically_exposed_person"
      end
      # resource path
      local_var_path = '/politically_exposed_people/{PoliticallyExposedPerson ID}'.sub('{' + 'PoliticallyExposedPerson ID' + '}', politically_exposed_person_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(politically_exposed_person)
      auth_names = ['AuthorizationKey', 'AuthorizationNonce', 'AuthorizationSecret', 'AuthorizationSignature']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PoliticallyExposedPersonResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PoliticallyExposedPeopleApi#patch_politically_exposed_person\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end


    # Creating a politically exposed person
    # Creates a new politically exposed person in our system. 
    # @param politically_exposed_person 
    # @param [Hash] opts the optional parameters
    # @return [PoliticallyExposedPersonResponse]
    def post_politically_exposed_people(politically_exposed_person, opts = {})
      data, _status_code, _headers = post_politically_exposed_people_with_http_info(politically_exposed_person, opts)
      data
    end

    # Creating a politically exposed person
    # Creates a new politically exposed person in our system. 
    # @param politically_exposed_person 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PoliticallyExposedPersonResponse, Fixnum, Hash)>] PoliticallyExposedPersonResponse data, response status code and response headers
    def post_politically_exposed_people_with_http_info(politically_exposed_person, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PoliticallyExposedPeopleApi.post_politically_exposed_people ...'
      end
      # verify the required parameter 'politically_exposed_person' is set
      if @api_client.config.client_side_validation && politically_exposed_person.nil?
        fail ArgumentError, "Missing the required parameter 'politically_exposed_person' when calling PoliticallyExposedPeopleApi.post_politically_exposed_people"
      end
      # resource path
      local_var_path = '/politically_exposed_people'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(politically_exposed_person)
      auth_names = ['AuthorizationKey', 'AuthorizationNonce', 'AuthorizationSecret', 'AuthorizationSignature']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PoliticallyExposedPersonResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PoliticallyExposedPeopleApi#post_politically_exposed_people\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
