=begin
#BitPesa Private API

#API specification used for internal BitPesa endpoints

OpenAPI spec version: 1.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.0.0-beta3

=end

require 'spec_helper'
require 'json'

# Unit tests for TransferZero::PoliticallyExposedPeopleApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'PoliticallyExposedPeopleApi' do
  before do
    # run before each test
    @api_instance = TransferZero::PoliticallyExposedPeopleApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of PoliticallyExposedPeopleApi' do
    it 'should create an instance of PoliticallyExposedPeopleApi' do
      expect(@api_instance).to be_instance_of(TransferZero::PoliticallyExposedPeopleApi)
    end
  end

  # unit tests for delete_politically_exposed_person
  # Deleting a politically exposed person
  # Deletes a single politically exposed person given the PEP ID.
  # @param politically_exposed_person_id The ID of the Politically Exposed Person you want to delete.  Example: &#x60;/v1/politically_exposed_people/1&#x60;
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_politically_exposed_person test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_politically_exposed_people
  # Listing Politically Exposed People
  # Get a list of politically exposed people
  # @param [Hash] opts the optional parameters
  # @option opts [String] :sender_id The ID of the Sender to whom the politically exposed people are attached to.  Example: &#x60;/v1/politically_exposed_people?sender_id&#x3D;344fb668-196d-43db-9d94-b34b7e6c7e0b&#x60;
  # @return [PoliticallyExposedPersonListResponse]
  describe 'get_politically_exposed_people test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_politically_exposed_person
  # Fetching a politically exposed person
  # Returns a single politically exposed person given the PEP ID. Can optionally be filtered using the sender_id query parameter.
  # @param politically_exposed_person_id The ID of the Politically Exposed Person you want to retrieve.  Example: &#x60;/v1/politically_exposed_people/1?sender_id&#x3D;344fb668-196d-43db-9d94-b34b7e6c7e0b&#x60;
  # @param [Hash] opts the optional parameters
  # @option opts [String] :sender_id The ID of the Sender to whom the politically exposed person is attached to.
  # @return [PoliticallyExposedPersonResponse]
  describe 'get_politically_exposed_person test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for patch_politically_exposed_person
  # Updating a politically exposed person
  # Updates a single politically exposed person given the PEP ID.
  # @param politically_exposed_person_id The ID of the Politically Exposed Person you want to update.  Example: &#x60;/v1/politically_exposed_people/1&#x60;
  # @param politically_exposed_person 
  # @param [Hash] opts the optional parameters
  # @return [PoliticallyExposedPersonResponse]
  describe 'patch_politically_exposed_person test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for post_politically_exposed_people
  # Creating a politically exposed person
  # Creates a new politically exposed person in our system. 
  # @param politically_exposed_person 
  # @param [Hash] opts the optional parameters
  # @return [PoliticallyExposedPersonResponse]
  describe 'post_politically_exposed_people test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
